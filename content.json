{"meta":{"title":"Noir's Blog","subtitle":"","description":"Noir的博客","author":"Noir","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-06-17T18:58:20.973Z","updated":"2023-06-17T18:58:20.973Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"联系我 邮箱:&#110;&#x6f;&#105;&#x72;&#112;&#x75;&#112;&#105;&#108;&#108;&#x65;&#115;&#x61;&#x69;&#x73;&#64;&#49;&#x36;&#51;&#x2e;&#99;&#x6f;&#109; 错误指正 关于本站仅作为个人存放日常学习资料和遇到的问题总结,由于本人水平有限,且部分老的博文是在尚不成熟时写的,故难免会存在过时内容或错误.如有发现,请直接在评论区指正."},{"title":"archives","date":"2023-06-17T13:45:05.000Z","updated":"2023-06-17T14:57:39.589Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2023-06-17T19:02:28.248Z","updated":"2023-06-17T19:02:28.248Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"友链暂不开放哦!!","text":"友链暂不开放哦!!"},{"title":"所有分类","date":"2023-06-19T11:34:46.336Z","updated":"2023-06-19T11:34:46.336Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-06-18T10:44:14.617Z","updated":"2023-06-18T10:44:14.617Z","comments":true,"path":"custom/darkmode.css","permalink":"http://example.com/custom/darkmode.css","excerpt":"","text":"#RightDownBtn { position: fixed; left: 1.875rem; bottom: 1.875rem; padding: 0.3125rem 0.625rem; background: #fff; border-radius: 0.1875rem; transition: 0.3s ease all; z-index: 1; align-items: flex-end; flex-direction: column; display: -moz-flex; display: flex; float: right; } #RightDownBtn>a, #RightDownBtn>label { width: 1.5em; height: 1.5em; margin: 0.3125rem 0; transition: .2s cubic-bezier(.25, .46, .45, .94); } /* font color */ .DarkMode #page, .DarkMode #colophon, .DarkMode #vcomments .vbtn, .DarkMode .art-content #archives .al_mon_list .al_mon, .DarkMode .art-content #archives .al_mon_list span, .DarkMode body, .DarkMode .art-content #archives .al_mon_list .al_mon, .DarkMode .art-content #archives .al_mon_list span, .DarkMode button, .DarkMode .art .art-content #archives a, .DarkMode textarea, .DarkMode strong, .DarkMode a, .DarkMode p, .DarkMode li, .DarkMode .label { color: rgba(255, 255, 255, .6); } .DarkMode #page, .DarkMode body, .DarkMode #colophon, .DarkMode #main-container, .DarkMode #page .yya, .DarkMode #content, .DarkMode #contentss, .DarkMode #footer { background-color: #292a2d; } .DarkMode strong, .DarkMode img { filter: brightness(.7); } /* sun and noon */ .Cuteen_DarkSky, .Cuteen_DarkSky:before { content: \"\"; position: fixed; left: 0; right: 0; top: 0; bottom: 0; z-index: 88888888 } .Cuteen_DarkSky { background: linear-gradient(#feb8b0, #fef9db) } .Cuteen_DarkSky:before { transition: 2s ease all; opacity: 0; background: linear-gradient(#4c3f6d, #6c62bb, #93b1ed) } .DarkMode .Cuteen_DarkSky:before { opacity: 1 } .Cuteen_DarkPlanet { z-index: 99999999; position: fixed; left: -50%; top: -50%; width: 200%; height: 200%; -webkit-animation: CuteenPlanetMove 2s cubic-bezier(.7, 0, 0, 1); animation: CuteenPlanetMove 2s cubic-bezier(.7, 0, 0, 1); transform-origin: center bottom } @-webkit-keyframes CuteenPlanetMove { 0% { transform: rotate(0) } to { transform: rotate(360deg) } } @keyframes CuteenPlanetMove { 0% { transform: rotate(0) } to { transform: rotate(360deg) } } .Cuteen_DarkPlanet:after { position: absolute; left: 35%; top: 40%; width: 9.375rem; height: 9.375rem; border-radius: 50%; content: \"\"; background: linear-gradient(#fefefe, #fffbe8) }"},{"title":"所有标签","date":"2023-06-19T11:35:13.399Z","updated":"2023-06-19T11:35:13.399Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2023-06-18T10:44:03.527Z","updated":"2023-06-18T10:44:03.527Z","comments":true,"path":"custom/darkmode.js","permalink":"http://example.com/custom/darkmode.js","excerpt":"","text":"function BackTOP() { $(\"#btn\").hide(); $(function () { $(window).scroll(function () { if ($(window).scrollTop() > 50) { $(\"#btn\").fadeIn(200); } else { $(\"#btn\").fadeOut(200); } }); $(\"#btn\").click(function () { $('body,html').animate({ scrollTop: 0 }, 500); return false; }); }); $(function () { $(\"#say\").click(function () { $('body,html').animate({ scrollTop: $('html, body').get(0).scrollHeight }, 500); return false; }); }) } $('#readmode').click(function () { $('body').toggleClass('read-mode') }) function SiderMenu() { $('#main-container').toggleClass('open'); $('.iconflat').css('width', '50px').css('height', '50px'); $('.openNav').css('height', '50px'); $('#main-container,#mo-nav,.openNav').toggleClass('open') } function switchNightMode() { $('').appendTo($(\"body\")), setTimeout( function () { (volantis.dark.mode == \"dark\") ? ($(\"html\").addClass(\"DarkMode\"), $('#modeicon').attr(\"xlink:href\", \"#icon-sun\")) : ($(\"html\").removeClass(\"DarkMode\"), $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\")), setTimeout(function () { $(\".Cuteen_DarkSky\").fadeOut(1e3, function () { $(this).remove() }) }, 2e3) }), 50 } function checkNightMode() { if ($(\"html\").hasClass(\"n-f\")) { $(\"html\").removeClass(\"day\"); $(\"html\").addClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-sun\") return; } if ($(\"html\").hasClass(\"d-f\")) { $(\"html\").removeClass(\"DarkMode\"); $(\"html\").addClass(\"day\"); $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\") return; } if (volantis.dark.mode == \"dark\") { $(\"html\").addClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-sun\") } else { $(\"html\").removeClass(\"DarkMode\"); $('#modeicon').attr(\"xlink:href\", \"#icon-_moon\") } } BackTOP(); window.addEventListener('load', ()=>{ volantis.dark.push(()=>{ switchNightMode(); }) }, {once: true})"}],"posts":[{"title":"appium常见用法","slug":"appium常见用法","date":"2023-06-17T18:24:53.101Z","updated":"2023-06-19T11:21:31.561Z","comments":true,"path":"2023/06/18/appium常见用法/","link":"","permalink":"http://example.com/2023/06/18/appium%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/","excerpt":"","text":"基本代码(启动代码) 准备工作 123456781. 打开模拟器或者连接真机2. 打开 appium 并启动服务器3. 获取被测 app 的包名和界面名Windows:adb shell dumpsys window windows | findstr mFocusedAppadb shell dumpsys window | findstr mCurrentFocus com.android.settings/.Settings 代码 12345678910111213141516171819import timefrom appium import webdriverdesired_capabilities = &#123; &quot;platformName&quot;: &quot;Android&quot;, # 手机的平台 不区分大小写 &quot;platformVersion&quot;: &quot;7&quot;, # 版本, 写大版本即可,比如 6.2.1 可以写在 6.2 6 &quot;deviceName&quot;: &quot;emulator-5554&quot;, # 手机的名字,随便写一个字符串,不能不写 &quot;appPackage&quot;: &quot;com.android.settings&quot;, # 打开应用的包名 &quot;appActivity&quot;: &quot;.Settings&quot; # 界面名（也叫启动名）&#125;# 获取驱动 http://127.0.0.1:4723/wd/hub 连接appium服务，# python和appium通信使用http协议driver = webdriver.Remote(&#x27;http://127.0.0.1:4723/wd/hub&#x27;, desired_capabilities)time.sleep(5)# 退出驱动driver.quit()# 注意：如果版本号写错，会有提示版本 noReset参数12345678910111213打开app，如果重置了，下次再次打开此app，会和新安装的app一样（没有缓存，重新输入密码，提示获取权限，引导页）desired_capabilities = &#123; &quot;platformName&quot;: &quot;Android&quot;, # 平台 不区分大小写 &quot;platformVersion&quot;: &quot;7&quot;, # 版本, 写大版本即可,比如 6.0 可以写在 6 &quot;deviceName&quot;: &quot;emulator-5554&quot;, # 手机的名字,随便写一个字符串,不能不写 &quot;appPackage&quot;: &quot;com.tpshop.malls&quot;, # 打开应用的包名 &quot;appActivity&quot;: &quot;.SPMainActivity&quot;, # 界面名 &quot;noReset&quot;: True&#125;&quot;noReset&quot;: True打开app，不重置；如果不传递此参数，打开app默认会重置应用。 app 的基本操作应用跳转123456# appium是支持跨应用的，同一个session可以打开多个 app# 使用场景：当需要打开其它app时，可以使用此方法driver.start_activity(appPackage, appActivity)- appPackage 包名- appActivity 界面名 获取包名和界面名12# 获取包名 driver.current_package# 获取界面名 driver.current_activity 使用场景：获取界面名，用于断言 关闭驱动和app12# driver.close_app()，关闭的是desired_capabilities中的app# 关闭驱动 driver.quit() 关闭了session会话 扩展：关闭指定app 1234扩展：# 指定app关闭，使用 driver.terminate_app(app的id)# app的id 就是 包名# close_app() 只能关闭desired_capabilities指定的app， 在将来会被舍弃 安装卸载判断是否安装12345678# 安装app，app_path 为安装文件完整路径名(写绝对路径) driver.install_app(app_path)# 卸载app，app_id为app包名 driver.remove_app(app_id)# 判断app是否安装，app_id为app包名 driver.is_app_installed(app_id) 路径解决办法 12345windows 的路径问题解决：1. 在路径前边的字符串前加上 r&quot;&quot; , 不会进行转义 r&quot;D:\\apks\\TPShop.apk&quot;2. 将 Windows 路径为： \\ 改为 linux路径： / &quot;D:/apks/TPShop.apk&quot;3. 将 \\ 改为 \\\\ &quot;D:\\\\apks\\\\TPShop.apk&quot; 将应用 置于后台12345# 将当前应用置于后台多少秒, 时间到了之后,会自动切换到前台# 使用场景：手机银行类app，应用置于后台一段时间，再切换到前台，需要重新进行身份认证# 语法：driver.background_app(seconds) &#x3D;&#x3D;2.2元素定位&#x3D;&#x3D;定位单个元素12345元素定位工具: 使用 SDK 中的 ui 工具# xpath语法回顾//*[@属性名=&#x27;属性值&#x27;]//*[contains(@属性名, &#x27;属性值&#x27;)] 定位单个元素12345元素定位工具: 使用 SDK 中的 ui 工具# xpath语法回顾//*[@属性名=&#x27;属性值&#x27;]//*[contains(@属性名, &#x27;属性值&#x27;)] 元素定位-定位一组元素1234# 通过另外一种写法来定位driver.find_elements() # 得到的是 列表, 如果没有找到,返回的也是空列表#注意： appium 只能定位到页面展示的元素 &#x3D;&#x3D;元素操作&#x3D;&#x3D;2.3.1点击&#x2F;输入&#x2F;清空1234567891011121314151617点击、el.click()输入、el.send_keys(内容)清空el.clear()补充：1.默认不能输入中文(Windows),想要输入中文, 需要在启动参数中添加如下内容 unicodeKeyboard 和 resetKeyboard 两个键值对, 值都是 Truedesired_capabilities&#123; &quot;unicodeKeyboard&quot;: True, &quot;resetKeyboard&quot;: True&#125;2. appium-python-client send_keys() 会将输入框中的内容进行清空后，再输入 获取元素文本、位置、大小**1234561. 获取文本el.text 2. 位置el.location3. 大小el.size 获取元素属性123456789101112134. 属性el.get_attribute(属性名 )- ID: resourceId- content-desc: content-desc- 获取 class: className- 获取 text ： text/name注意： 老版本appium 获取name属性，当content-desc为空时，获取的是text属性，当content-desc不为空时，返回是 content-desc 当前版本1.20 如何想获取content-desc直接传入 content-desc 滑动和拖拽&#x3D;&#x3D;swipe滑动&#x3D;&#x3D;123456789driver.swipe(start_x, start_y, end_x, end_y, duration=0)start_x: 起点X轴坐标 start_y: 起点Y轴坐标 end_x: 终点X轴坐标 end_y: 终点Y轴坐标duration: 滑动这个操作一共持续的时间长度，单位:ms, 时间越短，惯性越大，如果不需要惯性，设置5000左右。如果需要惯性-设置200ms练习：打开手机《设置》应用，完成下面的步骤:①.模拟手指从（500, 1600），滑动到（500, 500）的位置。 scroll 滑动1234567891011从一个元素滑动到另一个元素，直到页面自动停止driver.scroll(origin_el, destination_el, duration) origin_el: 开始元素destination_el: 结束元素duration: 滑动时间滑动时间：时间越短，惯性越大案例：从 显示 滑动到 WLAN drag_and_drop123456从一个元素拖拽到另一个元素, 无惯性(精确滑动)driver.drag_and_drop(开始元素, 结束元素)注意：没有惯性，精准的滑动案例：从 显示 滑动到 WLAN 滑动方式选择12* 是通过坐标滑动还是通过元素滑动* 是否需要惯性 通过坐标滑动 不需要惯性 swipe，持续时间duration设置的长一些（4000-5000ms） 需要惯性 swipe，持续时间duration设置短一些(100-200ms) 通过元素滑动 不需要惯性 scroll + duration设置长一些（4000-5000ms） drag_and_drop 需要惯性 scroll+duration设置的短一些(100-200ms) web-editor 有一些面试会提到，市面上有些人会使用这个工具 1234# 安装pip install weditor==0.6.3# 启动weditor 注意：运行代码前，需要关闭weditor 如果未手动停止，则报如下错误 appium自带查询元素信息1.启动appium服务器 2.创建New Session Window 5.真机调试华为 安装手机助手 手机连入计算机，会提示安装 使用360软件-搜索手机助手 根据手机助手进行连接 开启开发者模式 开启adb 和 usb调试模式 安装手机助手进行调试(和手机品牌有关) 查看是否连接成功 &#x3D;&#x3D;手势操作&#x3D;&#x3D;基本语法1234567891011移动端的手势操作 类似 web 端的鼠标操作1. 创建TouchAction对象 touch_action = TouchAction(driver)2. 调用高级手势对象提供所想执行的手势方法 touch_action.手势方法3. 执行手势 touch_action.perform()-----另外一种写法TouchAction(driver).手势方法.perform() 轻敲 tap123456789轻敲的结果类似 点击tap(el, x, y)- el: 元素对象- x: 点击 x 坐标- y: 点击 y 坐标注意：1.元素对象 和 坐标 任选其一,不用两个都选2.如果通过 坐标进行点击，页面打开需要时间，带点击前需要手动等待 time.sleep() 按下 和 抬起123456789101. 按下press(el=None,x=None,y=None)2. 抬起release()模拟 轻敲 (按下马上抬起)press(el=None,x=None,y=None).release()模拟 长按(按下不抬起)press(el=None,x=None,y=None) 长按1234long_press(el, x, y, duration=1000)- el: 元素对象- x, y: 坐标- duration: 长按的时间,单位时间是毫秒 思考时间12wait(ms) # ms 毫秒, 暂停多长时间使用按下和抬起 组合思考时间，实现长按 1234# 通过 press release wait 模拟长按3秒driver.find_element_by_xpath(&quot;//*[@text=&#x27;WLAN&#x27;]&quot;).click()time.sleep(2)TouchAction(driver).press(x=280, y=490).wait(3000).release().perform() 移动 move_to12345ove_to(el, x, y)# 实际场景1. 想移动,需要先按下2. 移动完成后, 需要抬起 一个app 一般 只有一个启动页，一般是首页 滑动操作实际是使用了手势操作-TouchAction 123456# swipe 代码def swipe(self: T, start_x: int, start_y: int, end_x: int, end_y: int, duration: int = 0) -&gt; T: action = TouchAction(self) action.press(x=start_x, y=start_y).wait(ms=duration).move_to(x=end_x, y=end_y).release() action.perform() return self &#x3D;&#x3D;手机操作&#x3D;&#x3D;获取屏幕分辨率和截图12345语法：获取手机分辨率: driver.get_window_size() ---&gt; 字典 &#123;&#x27;width&#x27;: 1440, &#x27;height&#x27;: 2392&#125;截图: get_screenshot_as_file(filename) time.strftime(&#x27;%Y%m%d-%H%M%S&#x27;) 给文件名添加后缀 获取和设置网络状态123456781. 获取网络状态driver.network_connection 2. 设置网络状态driver.set_network_connection(connection_type)- connection_type: 网络类型(0, 1, 2, 4, 6)@property 装饰器，可以将 实例方法作为属性来使用 获取和设置网络状态123456781. 获取网络状态driver.network_connection 2. 设置网络状态driver.set_network_connection(connection_type)- connection_type: 网络类型(0, 1, 2, 4, 6)@property 装饰器，可以将 实例方法作为属性来使用 发送键到设备(按键操作)1234567891011121314151617语法：driver.press_keycode(keycode)常用：Home 键(返回主页) 3返回键 4音量增加键 24音量减少键 25回车键 66注意：# 1.音量大小未显示时，按 音量加和音量减 只会唤醒 音量大小调整界面# 2.按键过快，会产生无效按键操作keycode查询https://blog.csdn.net/feizhixuan46789/article/details/16801429 &#x3D;&#x3D;通知栏的操作&#x3D;&#x3D;123456语法：打开通知栏: driver.open_notifications()appium官方并没有为我们提供关闭通知的api，那么 现实生活中怎么关闭，就怎样操作就行，比如，1.手指从下往 上滑动2.按返回键 &#x3D;&#x3D;获取 toast 信息&#x3D;&#x3D;toast操作 介绍： 操作过程中弹出的立即消失的弹出框， 本质上它也是页面的一个元素。 如何获取toast：建议使用xpath查询，因为使用工具很难定位到元素。 1driver.find_element(By.XPATH, &quot;//*[contains(@text, &#x27;toast中的部分文本内容&#x27;)]&quot;) 使用显示等待查找元素： 隐式等待的下一次找元素的频率，不适合这种一闪而过的toast 1element = WebDriverWait(driver, 30, 0.1).until(lambda x: x.find_element(By.XPATH, &quot;//*[contains(@text,&#x27;再次点击&#x27;)]&quot;)) 补充说明 新版本的appium软件，支持Uiautomator2 因此不需要安装特殊环境 123低版本的 appium(&lt;=1.13) 需要在启动参数中添加如下内容:desired_caps[&#x27;automationName&#x27;] = &#x27;Uiautomator2&#x27;高版本默认使用的就是 封装方法-获取toast 获取toast封装获取toast文本内容 1234567891011121314# 提供要获取toast部分文本，判断toast是否存在，如果存在，则返回文本内容，如果没有找到，则抛出异常文本未找到from selenium.webdriver.common.by import Byfrom selenium.webdriver.support.wait import WebDriverWaitdef get_toast(driver, content): &quot;&quot;&quot;根据部分toast，获取完整toast信息&quot;&quot;&quot; el_xpath = f&quot;//*[contains(@text, &#x27;&#123;content&#125;&#x27;)]&quot; el = WebDriverWait(driver, 10, 0.5).\\ until(lambda x: x.find_element(By.XPATH, el_xpath)) return el.text webviewApp分类123Native App 原生app, Web App 使用浏览器打开的应用，页面是用HTML实现的Hybrid App 混合应用, 在原生 app 中嵌套了 HTML 网页 手机中HTML页面如何操作 12webview 的作用是嵌套 HTML 页面.嵌套的 HTML 页面,不能直接使用移动端的元素定位,要使用 web 端的元素定位,就需要 web 端的 driver(Chrome) &#x3D;&#x3D;环境准备&#x3D;&#x3D;1.查看应用浏览器的版本。 方式一：在应用-&gt;显示系统进程-&gt;找到Android system webview版本。 不同手机模拟器和真机略有不同，推荐方式二 方式二：使用命令，在dos命令行中输入命令，在手机中查看 1adb shell am start -a android.intent.action.VIEW -d https://liulanmi.com/labs/core.html 2.下载对应的版本的浏览器内核 下载地址： http://npm.taobao.org/mirrors/chromedriver/ 3.根据手机浏览器版本在上面页面中找到对应的版本 https://cdn.npmmirror.com/binaries/chromedriver/2.42/notes.txt 4.解压放到固定目录。12# 将下载好的手机浏览器版本对应的驱动 chromedriver放置到没有中文的目录，建议不要放在path中D:\\tools\\app_tools\\chrome\\chromedriver.exe 5.程序配置”Chromdriver Binary Path”目录 打开 Appium-Server Desktop 程序配置”Chromdriver Binary Path”目录为第三部中的全路径。 点击 “Start Server”开启Appium Server Desktop &#x3D;&#x3D;webview 元素定位&#x3D;&#x3D;思路 浏览器本身是native的应用。 使用之前的native元素定位、交互即可 网页部分的内容是HTML页面， 和native部分使用了不同的上下文。 做完native部分的交互(地址输入、回车访问)之后。 需要切换到HTML页面。代码如下： 12# 在 原生应用和 webview 之间进行切换driver.switch_to.context(&quot;&quot;) 切换完成后使用web页面自动化的方式定位元素、进行操作即可。 注意：如果模拟器上的浏览器为chrome， web页面的定位只能使用CSS、XPATH定位， 其他不支持。 &#x3D;&#x3D;方法API&#x3D;&#x3D;123456789101112131415161718192021# 语法:获取所有的上下文,得到是列表driver.contexts [&#x27;NATIVE_APP&#x27;, &#x27;WEBVIEW_com.android.browser&#x27;]# 获取当前的上下文对象driver.context # 切换到指定的上下文对象driver.switch_to.context(上下文对象) # 备注：操作原生页面，需要切换到原生上下文，如果操作webview 需要切换到webview的上下文# 注意：# 部分版本的浏览器驱动存在问题原因会导致如下报错selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator (Session info: chrome=86.0.4240.198)请在 desired_capabilities添加如下两个参数&quot;chromeOptions&quot;: &#123;&#x27;w3c&#x27;: False&#125;Chrome和ChromeDriver组合默认在w3c模式下运行,只有手动指定 ChromeDriver运行模式为非w3c模式，才能规避这个bug","categories":[{"name":"自动化测试","slug":"自动化测试","permalink":"http://example.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"自动化","slug":"自动化","permalink":"http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"appium","slug":"appium","permalink":"http://example.com/tags/appium/"}],"author":"Noir"},{"title":"selenium常见用法","slug":"selenium常见交互","date":"2023-06-17T09:47:43.314Z","updated":"2023-06-19T11:21:26.518Z","comments":true,"path":"2023/06/17/selenium常见交互/","link":"","permalink":"http://example.com/2023/06/17/selenium%E5%B8%B8%E8%A7%81%E4%BA%A4%E4%BA%92/","excerpt":"","text":"selenium常见用法点击+输入+清空1234561. 元素点击element.click()2. 输入element.send_keys(内容)3. 清除element.clear() 大小&#x2F;文本&#x2F;属性1234561. 大小element.size2. 文本element.text3. 属性element.get_attribute(&#x27;属性名&#x27;) 判断元素是否可见123element.is_displayed()可见 : True不可见: False 判断元素是否可用12345简单的理解,可以认为是是否可以点击element.is_enabled()可用: True不可用: False 判断元素是否被选中123element.is_selected()选中: True未选中: False 浏览器常见的操作设置浏览器显示范围1234561. 窗口最大化 -- 重点driver.maximize_window() 2. 设置窗口大小dirver.set_window_size(width, height)3. 设置窗口位置dirver.set_window_position(x, y) 浏览器显示页面操作1234561. 页面后退操作driver.back()2. 页面前置操作driver.forword()3. 刷新driver.refresh() -- 重点 关闭窗口&#x2F;关闭浏览器12341. 关闭当前窗口driver.close() 关闭当前窗口2. 关闭浏览器driver.quit() 不管有多少个打开的窗口,都会直接关闭退出 获取标题&#x2F;URL123456作为页面断言的内容使用1. 标题driver.title2. URLdriver.current_url 下拉框 12345678910111. 在 HTML 页面中, 可以下拉选择内容的的称为是下拉框2. 下拉框的标准实现是 select 标签和 option 结合3. 下拉框中的内容是可以直接使用 元素定位的4. 如果,下拉框是 select 实现的, 推荐使用 selenium 中提供的方法去操作- 1. 创建Select 类(selenium 提供的)的对象- 对象 = Select(元素对象)- 2. 通过对象选择下拉框中的内容即可- - 对象.select_by_index(index) 根据索引选择, 从 0 开始- - 对象.select_by_value(value) 根据 value 属性值选择- - 对象.select_by_visible_text(text) # 根据文本内容选择 弹出框 12345678910111213141, 弹出框分为自定义弹出框 和 JS 弹出框2, 区分方式: 根据是否可以右键检查元素来区分, 如果可以检查元素, 就是自定义弹出框, 如果不能检查元素,就是 JS 弹出框3. 自定义弹出框的处理方式: 直接元素定位解决4. JS 弹出框的处理(alert(警告框)、confirm(确认框)、 prompt(提示框)), 这三种 JS 弹出框的处理方案是一样的.- 1. 获取弹出框对象: 对象 = driver.switch_to.alert- 2. 对弹出框进行处理:- - 确认: 对象.accept()- - 取消: 对象.dismiss()- 其他操作: 获取弹出框的内容 对象.text- prompt 提示框,输入内容,使用的也是 对象.send_keys()注意：在处理弹出框或者具有动画效果的页面，先等待页面加载完成后，再进行操作先等待几秒，在进行页面操作 滚动条123451, selenium 没有提供 直接操作滚动条的方法2, JS(javascript) 是可以 操作滚动条 js = &quot;window.scrollTo(x,y)&quot;3, selenium 提供的操作 JS 代码的方法 driver.execute_script(js) 鼠标操作1234567891011120. # 导包from selenium.webdriver import ActionChains1. 实例化鼠标对象mouse = ActionChains(driver)2. 书写要进行的鼠标操作mouse.操作()- move_to_element(元素对象) 鼠标悬停- context_click(元素对象) 鼠标右击- double_click(元素对象) 鼠标双击(选中)- drag_and_drop(开始元素对象, 结束元素对象) 拖拽3. 执行鼠标动作(必须有执行)mouse.perform() 鼠标悬停、鼠标右键、鼠标双击123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 1) 将鼠标悬停在 注册按钮上# 1, 实例化对象# action = ActionChains(driver)## # 2, 书写鼠标操作# action.move_to_element(driver.find_element(By.TAG_NAME, &#x27;button&#x27;))# # # 3, 执行鼠标操作# action.perform()# 导包import timefrom selenium import webdriver# 获取浏览器驱动对象from selenium.webdriver import ActionChainsfrom selenium.webdriver.common.by import Bydriver = webdriver.Chrome()# 打开注册A页面driver.get(&quot;http://121.43.169.97:8848/pageA.html&quot;)# 设置浏览器最大化driver.maximize_window()# 定位用户名输入框userA = driver.find_element(By.ID, &quot;userA&quot;)# 创建ActionChains 对象 actionaction = ActionChains(driver)# action调用鼠标右键的方法userA.send_keys(&quot;haha&quot;)action.context_click(userA).pause(2).double_click()# 调用perform方法time.sleep(2)action.perform()# 用户名输入 admintime.sleep(2)userA.send_keys(&quot;admin&quot;)# action调用鼠标双击方法action.double_click(userA)# 调用performtime.sleep(2)action.perform()# 3秒后关闭浏览器窗口time.sleep(5)driver.quit() 鼠标拖拽12345678910# 定位元素 div1 div2 用户拖拽div1 = driver.find_element(By.ID, &quot;div1&quot;)div2 = driver.find_element(By.ID, &quot;div2&quot;)# 创建 ActionChains对象action = ActionChains(driver)# action 调用 拖拽方法action.drag_and_drop(div1, div2)# action 调用 perform函数action.perform()","categories":[{"name":"自动化测试","slug":"自动化测试","permalink":"http://example.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"自动化","slug":"自动化","permalink":"http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"selenium","slug":"selenium","permalink":"http://example.com/tags/selenium/"}],"author":"Noir"}],"categories":[{"name":"自动化测试","slug":"自动化测试","permalink":"http://example.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"自动化","slug":"自动化","permalink":"http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"appium","slug":"appium","permalink":"http://example.com/tags/appium/"},{"name":"selenium","slug":"selenium","permalink":"http://example.com/tags/selenium/"}]}